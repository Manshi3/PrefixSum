Key idea: You can’t choose 2nd element from the beginning unless you have chosen the first one. Similarly, you can’t choose 2nd element from last unless you have chosen the last one.

So now just try all possible combinations. Choose 0 from the beginning and K from the last, 1 from front and K-1 from last and so on until K from beginning and 0 from behind. Maximum out of all those combinations is the answer.

To make it faster to find sum of first i cards, store the cumulative sum from the beginning to current index i in an array. In the similar way, store cumulative sums from the back in separate array.

How to solve exactly?

Find cumulative sum from beginning to the current index.
Find cumulative sum from behind till the current index.
If you choose i elements from front, you will need to choose k-i elements from behind.
Sum of first i elements = cumulativeSumFromFront[i],
Sum of last (k-i) elements = cumulativeSumFromBehind[K-i].
So points obtained when choosing i elements from the front = cumulativeSumFromFront[i] + cumulativeSumFromBehind[K-i]
Repeat Step 3 for all i ranging from 0 to K.
Return the maximum value of points reached.

class Solution {
public:
    int maxScore(vector<int>& cardPoints, int k) {
        int sum = 0;
        int n = cardPoints.size();

        vector<int> front(n+1, 0);
        vector<int> back(n+1, 0);
        
        sum = 0;
        for(int i = 0; i < n; i++) {
            sum += cardPoints[i];
            front[i+1] = sum;
        }

        sum = 0;
        for(int i = n - 1; i >= 0; i--) {
            sum += cardPoints[i];
            back[i] = sum;
        }
        reverse(back.begin(), back.end());

        int ans = INT_MIN;
        for(int i = 0; i <= k; i++) {
            ans = max(ans, front[i]+back[k-i]);
        }
        return ans;
    }
};
